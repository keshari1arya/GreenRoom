name: Deploy

on:
  workflow_call:
    inputs:
      environmentName:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environmentName }}
    env:
      SQLAdminUsername: ${{ vars.AWS_SQL_ADMINISTRATOR_USERNAME }}
      SQLAdminPassword: ${{ secrets.AWS_SQL_ADMINISTRATOR_PASSWORD }}
      EnvironmentName: ${{ inputs.environmentName }}
      ProjectName: ${{ vars.PROJECT_NAME }} # to be set if not available
      AWS_REGION: ${{ vars.AWS_REGION }} # to be set if not available
      AWS_STACK_NAME: ${{ vars.AWS_STACK_NAME }} # to be set if not available

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - if: inputs.environmentName == 'Development'
        name: Run preflight validation
        run: |
          aws cloudformation validate-template --template-body file://./.aws/cloudformation/main.yaml

      - if: inputs.environmentName != 'Development'
        name: Run change set
        run: |
          aws cloudformation create-change-set --stack-name ${{ vars.AWS_STACK_NAME }} --template-body file://./.aws/cloudformation/main.yaml --change-set-name changeset-$(date +%s) --parameters ParameterKey=EnvironmentName,ParameterValue=${{ inputs.environmentName }} ParameterKey=SqlAdministratorUsername,ParameterValue=${{ vars.AWS_SQL_ADMINISTRATOR_USERNAME }} ParameterKey=SqlAdministratorPassword,ParameterValue=${{ secrets.AWS_SQL_ADMINISTRATOR_PASSWORD }} ParameterKey=ProjectName,ParameterValue=${{ vars.PROJECT_NAME }}

  deploy:
    needs: [validate]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environmentName }}

    steps:
      - name: Print environment variables and inputs
        run: |
          echo "SQLAdminUsername: ${{ vars.AWS_SQL_ADMINISTRATOR_USERNAME }}"
          echo "SQLAdminPassword: ${{ secrets.AWS_SQL_ADMINISTRATOR_PASSWORD }}"
          echo "EnvironmentName: ${{ inputs.environmentName }}"
          echo "ProjectName: ${{ vars.PROJECT_NAME }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "AWS_STACK_NAME: ${{ vars.AWS_STACK_NAME }}"
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "AWS_STACK_NAME: ${{ vars.AWS_STACK_NAME }}"
          echo "AWS_RESOURCE_NAME_SUFFIX: ${{ vars.AWS_RESOURCE_NAME_SUFFIX }}"

      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/download-artifact@v4
        name: Download artifacts

      - name: Install .NET
        uses: actions/setup-dotnet@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          aws cloudformation deploy --stack-name ${{ vars.AWS_STACK_NAME }} --template-file ./.aws/cloudformation/main.yaml --parameter-overrides EnvironmentName=${{ inputs.environmentName }} SQLAdminUsername=${{ vars.AWS_SQL_ADMINISTRATOR_USERNAME }} SQLAdminPassword=${{ secrets.AWS_SQL_ADMINISTRATOR_PASSWORD }} ProjectName=${{ vars.PROJECT_NAME }} ResourceNameSuffix=${{ vars.AWS_RESOURCE_NAME_SUFFIX }} KeyName=${{ vars.AWS_EC2_SSH_KEY_NAME }}

      - name: Initialise database
        run: |
          unzip -o ./efbundle/efbundle.zip
          echo '{ "ConnectionStrings": { "DefaultConnection": "" } }' > appsettings.json
          ./efbundle.exe --connection "Server=${{ steps.deploy.outputs.SQLServerInstanceEndpoint }};Initial Catalog=${{ vars.AWS_RDS_SQLSERVER_DB_NAME }};Persist Security Info=False;User ID=${{ vars.AWS_SQL_ADMINISTRATOR_USERNAME }};Password=${{ secrets.AWS_SQL_ADMINISTRATOR_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" --verbose

      - name: Deploy website
        run: |
          aws s3 cp website/publish.zip s3://${{ vars.AWS_S3_BUCKET }}/website/publish.zip
          aws elasticbeanstalk create-application-version --application-name ${{ vars.AWS_EB_APP_NAME }} --version-label ${{ github.run_number }} --source-bundle S3Bucket=${{ vars.AWS_S3_BUCKET }},S3Key=website/publish.zip
          aws elasticbeanstalk update-environment --environment-name ${{ vars.AWS_EB_ENV_NAME }} --version-label ${{ github.run_number }}
