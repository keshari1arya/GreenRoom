AWSTemplateFormatVersion: "2010-09-09"
Description: AWS equivalent of Azure Bicep template for provisioning resources.

Parameters:
  EnvironmentName:
    Type: String
    AllowedValues:
      - Production
      - Staging
      - Development
    Description: Select the type of environment you want to provision.
  ProjectName:
    Type: String
    Description: The name of the project.
  ResourceNameSuffix:
    Type: String
    Description: A unique suffix for globally unique resources.
  SQLAdminUsername:
    Type: String
    Description: The administrator login username for the SQL Server database.
  SQLAdminPassword:
    Type: String
    NoEcho: true
    Description: The administrator login password for the SQL Server database.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.

Mappings:
  EnvironmentConfiguration:
    # Production:
    #   InstanceType: t3.medium
    #   DBInstanceClass: db.m6g.large
    #   MultiAZ: true
    # Staging:
    #   InstanceType: t3.small
    #   DBInstanceClass: db.t3.medium
    #   MultiAZ: false
    Development:
      InstanceType: t3.micro
      DBInstanceClass: db.t3.small
      MultiAZ: false

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-VPC"

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-Subnet"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to SQL Server and EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-SecurityGroup"

  SQLServerInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref EnvironmentName,
          DBInstanceClass,
        ]
      AllocatedStorage: 20
      DBName: !Sub "${ProjectName}-${EnvironmentName}"
      MasterUsername: !Ref SQLAdminUsername
      MasterUserPassword: !Ref SQLAdminPassword
      MultiAZ:
        !FindInMap [EnvironmentConfiguration, !Ref EnvironmentName, MultiAZ]
      Engine: sqlserver-ex
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      PubliclyAccessible: false
      DeletionProtection: false
      LicenseModel: license-included
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-SQLServerInstance"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref EnvironmentName,
          InstanceType,
        ]
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet
      AvailabilityZone: us-east-1a # Specify a supported Availability Zone
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      ImageId: ami-0453ec754f44f9a4a # Replace with a valid AMI ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          aws s3 cp s3://my-bucket/src/Web . --recursive
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentName}-EC2Instance"

Outputs:
  SQLServerInstanceEndpoint:
    Value: !GetAtt SQLServerInstance.Endpoint.Address
    Description: Endpoint for the SQL Server instance.

  EC2InstancePublicIP:
    Value: !GetAtt EC2Instance.PublicIp
    Description: Public IP address of the EC2 instance.
