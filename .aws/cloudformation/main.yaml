AWSTemplateFormatVersion: "2010-09-09"
Description: AWS equivalent of Azure Bicep template for provisioning resources.

Parameters:
  EnvironmentName:
    Type: String
    AllowedValues:
      - Production
      - Staging
      - Development
    Description: Select the type of environment you want to provision.
  ProjectName:
    Type: String
    Description: The name of the project.
  ResourceNameSuffix:
    Type: String
    Description: A unique suffix for globally unique resources.
  SQLAdminUsername:
    Type: String
    Description: The administrator login username for the RDS database.
  SQLAdminPassword:
    Type: String
    NoEcho: true
    Description: The administrator login password for the RDS database.

Mappings:
  EnvironmentConfiguration:
    Production:
      InstanceType: t3.medium
      DBInstanceClass: db.m6g.large
      MultiAZ: true
    Staging:
      InstanceType: t3.small
      DBInstanceClass: db.t3.medium
      MultiAZ: false
    Development:
      InstanceType: t3.micro
      DBInstanceClass: db.t3.small
      MultiAZ: false

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to RDS and Elastic Beanstalk
      VpcId: !Ref VPC

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref EnvironmentName,
          DBInstanceClass,
        ]
      AllocatedStorage: 20
      DBName: !Sub "${ProjectName}-${EnvironmentName}"
      MasterUsername: !Ref SQLAdminUsername
      MasterUserPassword: !Ref SQLAdminPassword
      MultiAZ:
        !FindInMap [EnvironmentConfiguration, !Ref EnvironmentName, MultiAZ]
      Engine: mysql
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      PubliclyAccessible: false
      DeletionProtection: false

  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub "${ProjectName}-${EnvironmentName}"

  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: !Sub "${ProjectName}-${EnvironmentName}"
      SolutionStackName: "64bit Amazon Linux 2 v3.4.6 running Node.js 14"
      OptionSettings:
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: SingleInstance
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref EnvironmentName,
              InstanceType,
            ]

  SecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${EnvironmentName}-DBCredentials"
      Description: RDS database credentials
      SecretString: !Sub |
        {
          "username": "${SQLAdminUsername}",
          "password": "${SQLAdminPassword}",
          "database": "${ProjectName}-${EnvironmentName}",
          "host": "${RDSInstance.Endpoint.Address}"
        }

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/elasticbeanstalk/${ProjectName}-${EnvironmentName}"
      RetentionInDays: 30

Outputs:
  RDSInstanceEndpoint:
    Value: !GetAtt RDSInstance.Endpoint.Address
    Description: Endpoint for the RDS instance.

  ElasticBeanstalkURL:
    Value: !GetAtt ElasticBeanstalkEnvironment.EndpointURL
    Description: URL of the Elastic Beanstalk environment.

  SecretsManagerARN:
    Value: !Ref SecretManager
    Description: ARN of the Secrets Manager resource.
